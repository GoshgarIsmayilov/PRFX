window.addEventListener('load', async () => {
    provider = new ethers.providers.Web3Provider(web3.currentProvider);

    await provider.send("eth_requestAccounts", []);

    $("#send-token-loader").hide();
    $("#receive-token-loader").hide();
});

var abi = JSON.parse('[{"inputs":[{"internalType":"uint256","name":"_registrationStartTime","type":"uint256"},{"internalType":"uint256","name":"_registrationTimeLimit","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"calculateMaximumHypercubeStage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"fetchEncryption","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getContractState","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPair","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPairAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPairPublicKey","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"commitment","type":"uint256"},{"internalType":"string","name":"publicKey","type":"string"}],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"secretMessage","type":"string"}],"name":"submitEncryption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256","name":"nextPrefixCommitment","type":"uint256"},{"internalType":"uint256","name":"nextBufferCommitment","type":"uint256"}],"name":"verifyPrefixAggregation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]');

var bytecode = "6080604052600060085560006009556000600a556000600b556000600c5534801561002957600080fd5b5060405161254f38038061254f83398101604081905261004891610056565b600a91909155600b5561007a565b6000806040838503121561006957600080fd5b505080516020909101519092909150565b6124c6806100896000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a00fd3c811610066578063a00fd3c814610144578063b307921314610157578063c1f1b1b51461017a578063c64409c614610190578063f89be159146101a957600080fd5b80636d05da8d146100985780637f4e4849146100ad5780638cf7c1301461011c5780638d5f81e214610124575b600080fd5b6100ab6100a6366004610a28565b6101be565b005b6100e23360009081526001602090815260408083205460058352818420546002909352922054600954600854600c5483949596565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b6100ab6101fd565b61012c610237565b6040516001600160a01b039091168152602001610113565b6100ab610152366004610a65565b610272565b61016a610165366004610afc565b610368565b6040519015158152602001610113565b610182610777565b604051908152602001610113565b61019861079e565b604051610113959493929190610be3565b6101b1610898565b6040516101139190610c1a565b60006101c8610237565b3360009081526006602090815260408083206001600160a01b038516845290915290209091506101f88382610cbc565b505050565b6000600854600261020e9190610e78565b6007549091508110156102345760016008600082825461022e9190610e84565b90915550505b50565b600080610242610777565b90506007818154811061025757610257610e97565b6000918252602090912001546001600160a01b031692915050565b336000908152600360205260409020805461028c90610c34565b1590506102df5760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320616c726561647920726567697374657265642100000000604482015260640160405180910390fd5b6007543360009081526020818152604080832093909355600181528282208590556002815282822085905560039052206103198282610cbc565b50600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b031916331790556103646101fd565b5050565b6000806040516103779061094f565b604051809103906000f080158015610393573d6000803e3d6000fd5b50905060006103a0610777565b90506000826001600160a01b031663c86f7e908a8a8a60405180610100016040528060026000336001600160a01b03166001600160a01b0316815260200190815260200160002054815260200160016000336001600160a01b03166001600160a01b031681526020019081526020016000205481526020016001600060078b8154811061042f5761042f610e97565b60009182526020808320909101546001600160a01b03168352828101939093526040918201812054845233815280835281902054918301919091528181018a9052606082018e9052608082018d9052600160a090920191909152516001600160e01b031960e087901b1681526104ab9493929190600401610ed6565b602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610f5a565b9050801561076b576001600c60008282546105079190610e84565b9091555050600754600c54036105355760016009600082825461052a9190610e84565b90915550506000600c555b600560006007848154811061054c5761054c610e97565b60009182526020808320909101546001600160a01b03168352820192909252604001812054900361059b573360009081526004602090815260408083208990556005909152902085905561076b565b336000908152600260205260408120879055600780546004929190859081106105c6576105c6610e97565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002054600260006007858154811061061c5761061c610e97565b60009182526020808320909101546001600160a01b03168352828101939093526040918201812093909355338352600190915281208690556007805460059291908590811061066d5761066d610e97565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205460016000600785815481106106c3576106c3610e97565b60009182526020808320909101546001600160a01b031683528201929092526040018120919091556007805460049183918690811061070457610704610e97565b60009182526020808320909101546001600160a01b031683528201929092526040018120919091556007805460059183918690811061074557610745610e97565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b98975050505050505050565b600060095460026107889190610e78565b3360009081526020819052604090205418919050565b606060008060008060006107b0610777565b905060006107bc610237565b6001600160a01b03811660009081526006602090815260408083203384528252808320600854600954938590529190932054835494955092939092908690859061080590610c34565b80601f016020809104026020016040519081016040528092919081815260200182805461083190610c34565b801561087e5780601f106108535761010080835404028352916020019161087e565b820191906000526020600020905b81548152906001019060200180831161086157829003601f168201915b505050505094509650965096509650965050509091929394565b606060006108a4610237565b6001600160a01b03811660009081526003602052604090208054919250906108cb90610c34565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790610c34565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b505050505091505090565b61151480610f7d83390190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156109955761099561095c565b60405290565b600082601f8301126109ac57600080fd5b813567ffffffffffffffff808211156109c7576109c761095c565b604051601f8301601f19908116603f011681019082821181831017156109ef576109ef61095c565b81604052838152866020858801011115610a0857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610a3a57600080fd5b813567ffffffffffffffff811115610a5157600080fd5b610a5d8482850161099b565b949350505050565b60008060408385031215610a7857600080fd5b82359150602083013567ffffffffffffffff811115610a9657600080fd5b610aa28582860161099b565b9150509250929050565b600082601f830112610abd57600080fd5b610ac5610972565b806040840185811115610ad757600080fd5b845b81811015610af1578035845260209384019301610ad9565b509095945050505050565b60008060008060006101408688031215610b1557600080fd5b610b1f8787610aac565b9450604087605f880112610b3257600080fd5b610b3a610972565b8060c089018a811115610b4c57600080fd5b838a015b81811015610b7157610b628c82610aac565b84526020909301928401610b50565b50819750610b7f8b82610aac565b989b979a509798610100810135985061012001359695505050505050565b6000815180845260005b81811015610bc357602081850181015186830182015201610ba7565b506000602082860101526020601f19601f83011685010191505092915050565b60a081526000610bf660a0830188610b9d565b90508560208301528460408301528360608301528260808301529695505050505050565b602081526000610c2d6020830184610b9d565b9392505050565b600181811c90821680610c4857607f821691505b602082108103610c6857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f857600081815260208120601f850160051c81016020861015610c955750805b601f850160051c820191505b81811015610cb457828155600101610ca1565b505050505050565b815167ffffffffffffffff811115610cd657610cd661095c565b610cea81610ce48454610c34565b84610c6e565b602080601f831160018114610d1f5760008415610d075750858301515b600019600386901b1c1916600185901b178555610cb4565b600085815260208120601f198616915b82811015610d4e57888601518255948401946001909101908401610d2f565b5085821015610d6c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610dcd578160001904821115610db357610db3610d7c565b80851615610dc057918102915b93841c9390800290610d97565b509250929050565b600082610de457506001610e72565b81610df157506000610e72565b8160018114610e075760028114610e1157610e2d565b6001915050610e72565b60ff841115610e2257610e22610d7c565b50506001821b610e72565b5060208310610133831016604e8410600b8410161715610e50575081810a610e72565b610e5a8383610d92565b8060001904821115610e6e57610e6e610d7c565b0290505b92915050565b6000610c2d8383610dd5565b80820180821115610e7257610e72610d7c565b634e487b7160e01b600052603260045260246000fd5b8060005b6002811015610ed0578151845260209384019390910190600101610eb1565b50505050565b6102008101610ee58287610ead565b60408083018660005b6002811015610f1557610f02838351610ead565b9183019160209190910190600101610eee565b50505050610f2660c0830185610ead565b61010082018360005b6008811015610f4e578151835260209283019290910190600101610f2f565b50505095945050505050565b600060208284031215610f6c57600080fd5b81518015158114610c2d57600080fdfe608060405234801561001057600080fd5b506114f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c86f7e901461003b578063f1942cd114610062575b600080fd5b61004e610049366004611285565b610075565b604051901515815260200160405180910390f35b61004e610070366004611355565b61018d565b600061007f61104e565b60408051808201825287518152602080890151818301529083528151608081018352875151818401908152885183015160608301528152825180840184528883018051518252518301518184015281830152838201528151808301835286518152868201518183015283830152815160088082526101208201909352600092909182016101008036833701905050905060005b60088110156101615784816008811061012d5761012d61141a565b60200201518282815181106101445761014461141a565b60209081029190910101528061015981611446565b915050610112565b5061016c818361022f565b60000361017e57600192505050610185565b6000925050505b949350505050565b6040805160088082526101208201909252600091829190602082016101008036833701905050905060005b6008811015610207578381600881106101d3576101d361141a565b60200201518282815181106101ea576101ea61141a565b6020908102919091010152806101ff81611446565b9150506101b8565b50610212818561022f565b600003610223576001915050610229565b60009150505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018161025b6103b2565b905080608001515185516001610271919061145f565b1461027b57600080fd5b604080518082019091526000808252602082018190525b865181101561032957838782815181106102ae576102ae61141a565b6020026020010151106102c057600080fd5b6103158261031085608001518460016102d9919061145f565b815181106102e9576102e961141a565b60200260200101518a85815181106103035761030361141a565b6020026020010151610a8f565b610aed565b91508061032181611446565b915050610292565b506103528183608001516000815181106103455761034561141a565b6020026020010151610aed565b90506103968560000151866020015161036a84610b43565b856040015161037c8a60400151610b43565b6060880151885161038c90610b43565b8960200151610be2565b6103a65760019350505050610229565b50600095945050505050565b6103ba61109f565b6040805180820182527f231e4f143e04c26eddc3ccb60351cfbb96ba7257df8fe4ab9283ec52abbe9c8281527f0928553f8c1c8bb0b472434648165a50b54db21b6c96e55ad7482dd3ddc08a8d6020808301919091529083528151608080820184527f24f136c11407f08b0c03b1799d85449726afdd87c1c730d339e6539c1276e6aa8285019081527f1a789df5909f6fd280c5be03738087a817db873546595abc4f6821f7da0c04dc606080850191909152908352845180860186527f1a4b1cdb209ec5f074d53deeddbdd1f3fb282a890d4630cad904eada38f1e5e081527f11ee5f7c19857b66082c3c1c6bf42bbce2d8f14ad4611b080eacecf38f8ba5c7818601528385015285840192909252835180820185527f29ac6dfaffd7b2d1363bbb2024ad2158e195975968c1d2027746710a4e2709a18186019081527f117a866f7d60af515b4a93f77ab0636f40d4324cf3cc43d3d789773fbc9f1532828501528152845180860186527f1d04d14bcf7e97e2a004c786847679d3c26fa6c2dc09582ccc1388e7de007b3281527f1319e4f4f4532143dd6442f44592d86e64021d573cab761802be7feb366a7e93818601528185015285850152835190810184527f25d45f1c5e461687ebd4611453054977b1d919cbcd946a702dbfab0542d5c4b18185019081527f0c1d13234d3357f5717acb5258be24d16b911df762ba38f32168835e64f18b86828401528152835180850185527f20640f3c2565c1071608a41f93f0f777d40bad0b30fbf4c6e97fb098bb05e28481527f29400c4f8944ff1caa079eff1bc47adc95e0e4cb24745d85faeb9757b8c2da58818501528184015290840152815160098082526101408201909352919082015b604080518082019091526000808252602082015281526020019060019003908161063657505060808201908152604080518082019091527f03a5be3dee824a8177c5a928e39cf651bfb1351cc6d23b29eec8ab9bd700183d81527f27392898be165adb6301342716789ac4ff0eb4c4610317e67817eee36004a3796020820152905180516000906106c9576106c961141a565b602002602001018190525060405180604001604052807f176bf172ac316470861365758f65907d09711b6bf38d3550bea5333774d2ad4e81526020017f12a303e8a9190135d2347009f5d7d5fba9fc67d92d25818947c0516e6734c5ba81525081608001516001815181106107405761074061141a565b602002602001018190525060405180604001604052807f120afde4b01f4c26f0044241f42b3e3bb5ceb92d63ca3eef222ff42adf3101f881526020017f2113e86e6ba2f0bbf10c9453c5d7fde9f465db3015def8ba7763f9eb8689670e81525081608001516002815181106107b7576107b761141a565b602002602001018190525060405180604001604052807f1653050b629e6313e3463c8152acf22570052d1f9e89190b491b577f5b967ee281526020017f0c2e7bfaf373a7ea1eaf18cea0ab71fc39ea8efb7362d833e1d3b0385d2b6426815250816080015160038151811061082e5761082e61141a565b602002602001018190525060405180604001604052807f12aac226d22842e9cc6e0af8ccea265ea62d76406860e55a950ec4f16e07898f81526020017f019a94fa1292a281d0594649468e4ad24f8170911fec44c2e6aa36f73ee71d7281525081608001516004815181106108a5576108a561141a565b602002602001018190525060405180604001604052807f1c655a672acf24d460b66bbbd3d62eb8dce05ec229850178e95070236737358281526020017f039737d8f0def992e2025fad1112a9414d480dbd7fe326b5be08750107df3f23815250816080015160058151811061091c5761091c61141a565b602002602001018190525060405180604001604052807f2345b2a8c12695d85feba1cb23672ea15cda86292212fe67836b9e6825f2b19281526020017f1848e0ce1a8f6bbea28d8392850ef70c5afb5e8d1d1d7a4969aee4b1add4d0c281525081608001516006815181106109935761099361141a565b602002602001018190525060405180604001604052807f1281a000c909eabd1addc8d20f9ec53cd5f59a40b8382f6791b9be540d3ddda581526020017f215c41c0f2c1e9f0a265180093150b17b4ed008e8bd835919b62812c8e12dfb28152508160800151600781518110610a0a57610a0a61141a565b602002602001018190525060405180604001604052807f20fff86b075810708cc1836ee15eaf875999c56d1686eb1eda51ed027b07668c81526020017f03ea12e9029b24c4a83b472a5e6ed4659e210d7eda6ede457540674836a3e85f8152508160800151600881518110610a8157610a8161141a565b602002602001018190525090565b6040805180820190915260008082526020820152610aab6110f0565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610ada57fe5b5080610ae557600080fd5b505092915050565b6040805180820190915260008082526020820152610b0961110e565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610ada57fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610b8a57506020830151155b15610baa5750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610bcf9190611472565b610bd99084611494565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610bfd57505060408051600480825260a0820190925291925060009190602082015b610c4761112c565b815260200190600190039081610c3f5790505090508a82600081518110610c7057610c7061141a565b60200260200101819052508882600181518110610c8f57610c8f61141a565b60200260200101819052508682600281518110610cae57610cae61141a565b60200260200101819052508482600381518110610ccd57610ccd61141a565b60200260200101819052508981600081518110610cec57610cec61141a565b60200260200101819052508781600181518110610d0b57610d0b61141a565b60200260200101819052508581600281518110610d2a57610d2a61141a565b60200260200101819052508381600381518110610d4957610d4961141a565b6020026020010181905250610d5e8282610d6d565b9b9a5050505050505050505050565b60008151835114610d7d57600080fd5b82516000610d8c8260066114a7565b905060008167ffffffffffffffff811115610da957610da9611188565b604051908082528060200260200182016040528015610dd2578160200160208202803683370190505b50905060005b8381101561100d57868181518110610df257610df261141a565b60200260200101516000015182826006610e0c91906114a7565b610e1790600061145f565b81518110610e2757610e2761141a565b602002602001018181525050868181518110610e4557610e4561141a565b60200260200101516020015182826006610e5f91906114a7565b610e6a90600161145f565b81518110610e7a57610e7a61141a565b602002602001018181525050858181518110610e9857610e9861141a565b60209081029190910181015151015182610eb38360066114a7565b610ebe90600261145f565b81518110610ece57610ece61141a565b602002602001018181525050858181518110610eec57610eec61141a565b6020908102919091010151515182610f058360066114a7565b610f1090600361145f565b81518110610f2057610f2061141a565b602002602001018181525050858181518110610f3e57610f3e61141a565b602002602001015160200151600160028110610f5c57610f5c61141a565b602002015182610f6d8360066114a7565b610f7890600461145f565b81518110610f8857610f8861141a565b602002602001018181525050858181518110610fa657610fa661141a565b602002602001015160200151600060028110610fc457610fc461141a565b602002015182610fd58360066114a7565b610fe090600561145f565b81518110610ff057610ff061141a565b60209081029190910101528061100581611446565b915050610dd8565b5061101661114c565b6000602082602086026020860160086107d05a03fa9050808061103557fe5b508061104057600080fd5b505115159695505050505050565b6040805160a08101909152600060608201818152608083019190915281526020810161107861112c565b815260200161109a604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110c961112c565b81526020016110d661112c565b81526020016110e361112c565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806040016040528061113f61116a565b815260200161109a61116a565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156111c1576111c1611188565b60405290565b600082601f8301126111d857600080fd5b6111e061119e565b8060408401858111156111f257600080fd5b845b8181101561120c5780358452602093840193016111f4565b509095945050505050565b600082601f83011261122857600080fd5b60405161010080820182811067ffffffffffffffff8211171561124d5761124d611188565b6040528301818582111561126057600080fd5b845b8281101561127a578035825260209182019101611262565b509195945050505050565b600080600080610200858703121561129c57600080fd5b6112a686866111c7565b9350604086605f8701126112b957600080fd5b6112c161119e565b8060c08801898111156112d357600080fd5b8389015b818110156112f8576112e98b826111c7565b845260209093019284016112d7565b508196506113068a826111c7565b95505050505061131a866101008701611217565b905092959194509250565b60006040828403121561133757600080fd5b61133f61119e565b9050813581526020820135602082015292915050565b60008082840361020081121561136a57600080fd5b6101008082121561137a57600080fd5b6040516060810181811067ffffffffffffffff8211171561139d5761139d611188565b6040526113aa8787611325565b81526080603f19840112156113be57600080fd5b6113c661119e565b92506113d587604088016111c7565b83526113e487608088016111c7565b60208401528260208201526113fc8760c08801611325565b6040820152935061140f86868301611217565b925050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161145857611458611430565b5060010190565b8082018082111561022957610229611430565b60008261148f57634e487b7160e01b600052601260045260246000fd5b500690565b8181038181111561022957610229611430565b80820281158282048414176102295761022961143056fea264697066735822122046048e89747fefcec9167080af9a2d981d043f0775e5986ef0c5f5f95f3f108864736f6c63430008150033a2646970667358221220edf2088fe10cd1e27b8416ff416f2bf338cc6d4e3ed637c3a1166c29a18a6c7f64736f6c63430008150033";
    
async function deploy_contract() {
    let registration_start_time = $("#registration-start-time").val();
    let registration_time_limit = $("#registration-time-limit").val();

    let signer = provider.getSigner(0);
    let factory = new ethers.ContractFactory(abi, bytecode, signer);
    let contract = await factory.deploy(String(registration_start_time), String(registration_time_limit));

    $("#status-deploy-contract").html('<b style="color:green;">The contract is deployed with the address: ' + contract.address + '</b>');
}

async function register() {
    /*  A - prefix, buffer, prefixSalt, bufferSalt */

    let contract_address = $("#register-contract-address").val();
    let prefix = $("#register-secret-value").val();
    
    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    const register_signer = provider.getSigner()
    const ethereum_address = await register_signer.getAddress()
    const hash = await ethers.utils.keccak256(ethereum_address)
    const signature = await signer.signMessage(ethers.utils.arrayify(hash))
    const public_key = ethers.utils.recoverPublicKey(ethers.utils.arrayify(ethers.utils.hashMessage(ethers.utils.arrayify(hash))), signature);

    let buffer = prefix;

    let prefixSalt = Math.floor(Math.random() * (10 ** 16)); // Number.MAX_SAFE_INTEGER
    let bufferSalt = prefixSalt;

    console.log(prefix, buffer);
    console.log(prefixSalt, bufferSalt);

    let commitment = await zokrates_hash(String(prefix), String(prefixSalt));
    commitment = JSON.parse(commitment);

    console.log(commitment);

    let transaction = await contract.register(String(commitment), String(public_key));
    
    $("#status-register").html('<b style="color:green;">You have registered with the transaction: ' + transaction.hash + 
                                                   '<br>Secure number is ' + 
                                                   String(prefix.toString(32)) + '-' + String(buffer.toString(32)) + '-' + 
                                                   String(prefixSalt.toString(32)) + '-' + String(bufferSalt.toString(32)) + 
                                                   '<br>Record secure number to involve with private summation. </b>');
} 

async function submit() {
    let contract_address = $("#submit-contract-address").val();
    let secure_number = $("#submit-secure-number").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    let [prefix, buffer, prefixSalt, bufferSalt] = secure_number.split("-");

    buffer = parseInt(buffer, 32);
    bufferSalt = parseInt(bufferSalt, 32);
    console.log(buffer, bufferSalt);
    
    let public_key = await contract.getPairPublicKey();
    console.log(public_key);

    let ciphertext = await encrypt(public_key.substr(2), String(buffer) + " " + String(bufferSalt)); 
    let transaction = await contract.submitEncryption(String(ciphertext));

    $("#status-submit").html('<b style="color:green;">You have submitted the encryptions with the transaction: ' + transaction.hash);
}

async function verify() {
    let contract_address = $("#verify-contract-address").val();
    let secure_number = $("#verify-secure-number").val();
    let private_key = $("#verify-private-key").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    let [prefix, buffer, prefixSalt, bufferSalt] = secure_number.split("-");

    prefix = parseInt(prefix, 32);
    buffer = parseInt(buffer, 32);
    prefixSalt = parseInt(prefixSalt, 32);
    bufferSalt = parseInt(bufferSalt, 32);

    let [ciphertextPair, maximumHypercubeStage, currentHypercubeStage, myId, pairId] = await contract.fetchEncryption();

    console.log(myId);
    console.log(pairId);

    // Configuration
    let pairPlaintext = await decrypt(private_key, ciphertextPair);
    let pairBuffer = parseInt(pairPlaintext.split(" ")[0]);
    let pairBufferSalt = parseInt(pairPlaintext.split(" ")[1]);

    let nextBuffer = parseInt(buffer) + parseInt(pairBuffer);
    let nextPrefix = (myId > pairId) ? parseInt(prefix) + parseInt(pairBuffer) : parseInt(prefix);
    let nextBufferSalt = Math.floor(Math.random() * (10 ** 16)); 
    let nextPrefixSalt = Math.floor(Math.random() * (10 ** 16)); 

    let prefixCommitment = await zokrates_hash(String(prefix), String(prefixSalt));
    prefixCommitment = JSON.parse(prefixCommitment);
    let bufferCommitment = await zokrates_hash(String(buffer), String(bufferSalt));
    bufferCommitment = JSON.parse(bufferCommitment);
    let pairBufferCommitment = await zokrates_hash(String(pairBuffer), String(pairBufferSalt));
    pairBufferCommitment = JSON.parse(pairBufferCommitment);
    let nextBufferCommitment = await zokrates_hash(String(nextBuffer), String(nextBufferSalt));
    nextBufferCommitment = JSON.parse(nextBufferCommitment);
    let nextPrefixCommitment = await zokrates_hash(String(nextPrefix), String(nextPrefixSalt));
    nextPrefixCommitment = JSON.parse(nextPrefixCommitment);

    console.log(prefixCommitment);
    console.log(bufferCommitment);
    console.log(pairBufferCommitment);
    console.log(nextPrefixCommitment);
    console.log(nextBufferCommitment);

    console.time('Proof Generation Time');

    let proof = await zokrates_prefix_proof(String(prefix), String(prefixSalt), String(nextPrefixSalt), String(prefixCommitment), String(buffer), String(bufferSalt), String(nextBufferSalt), String(bufferCommitment), String(pairBuffer), String(pairBufferSalt), String(pairBufferCommitment), String(myId), String(pairId), String(nextPrefixCommitment), String(nextBufferCommitment));

    console.timeEnd('Proof Generation Time');

    console.log(proof.proof.a);
    console.log(proof.proof.b);
    console.log(proof.proof.c);
    console.log(proof.inputs);

    let transaction = await contract.verifyPrefixAggregation(proof.proof.a, proof.proof.b, proof.proof.c, String(nextPrefixCommitment), String(nextBufferCommitment));
  
    if (Number(currentHypercubeStage) + 1 == Number(maximumHypercubeStage)) {
        $("#status-verify").html('<b style="color:green;">You have verified with the transaction: ' + transaction.hash + 
                                                     '<br>Congratulations! Final prefix sum is ' + String(parseInt(nextPrefix)));
    }
    else {
        $("#status-verify").html('<b style="color:green;">You have verified with the transaction: ' + transaction.hash + 
                                                   '<br>Secure number is ' + 
                                                   String(nextPrefix.toString(32)) + '-' + String(nextBuffer.toString(32)) + '-' + 
                                                   String(nextPrefixSalt.toString(32)) + '-' + String(nextBufferSalt.toString(32)) + 
                                                   '<br>Record secure number to involve with private summation. </b>');
    }
}